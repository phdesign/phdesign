// When DOM is fully loaded
jQuery(document).ready(function ($) {

	/* FlexSlider
	--------------------------------------------------*/
	
	$('.flexslider').flexslider({
	    namespace           : "flex-",           //{NEW} String: Prefix string attached to the class of every element generated by the plugin
	    selector            : ".slides > li",    //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
	    animation           : "fade",            //String: Select your animation type, "fade" or "slide"
	    easing              : "swing",           //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
	    direction           : "horizontal",      //String: Select the sliding direction, "horizontal" or "vertical"
	    reverse             : false,             //{NEW} Boolean: Reverse the animation direction
	    animationLoop       : true,              //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
	    smoothHeight        : false,             //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode
	    startAt             : 0,                 //Integer: The slide that the slider should start on. Array notation (0 = first slide)
	    slideshow           : true,              //Boolean: Animate slider automatically
	    slideshowSpeed      : 7000,              //Integer: Set the speed of the slideshow cycling, in milliseconds
	    animationSpeed      : 600,               //Integer: Set the speed of animations, in milliseconds
	    initDelay           : 0,                 //{NEW} Integer: Set an initialization delay, in milliseconds
	    randomize           : false,             //Boolean: Randomize slide order
	     
	    // Usability features
	    pauseOnAction       : true,              //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
	    pauseOnHover        : false,             //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
	    useCSS              : true,              //{NEW} Boolean: Slider will use CSS3 transitions if available
	    touch               : true,              //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
	    video               : false,             //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches
	     
	    // Primary Controls
	    controlNav          : true,              //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
	    directionNav        : true,              //Boolean: Create navigation for previous/next navigation? (true/false)
	    prevText            : "Previous",        //String: Set the text for the "previous" directionNav item
	    nextText            : "Next",            //String: Set the text for the "next" directionNav item
	     
	    // Secondary Navigation
	    keyboard            : true,              //Boolean: Allow slider navigating via keyboard left/right keys
	    multipleKeyboard    : false,             //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
	    mousewheel          : false,             //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
	    pausePlay           : false,             //Boolean: Create pause/play dynamic element
	    pauseText           : 'Pause',           //String: Set the text for the "pause" pausePlay item
	    playText            : 'Play',            //String: Set the text for the "play" pausePlay item
	     
	    // Special properties
	    controlsContainer   : "",                //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
	    manualControls      : "",                //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
	    sync                : "",                //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
	    asNavFor            : "",                //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider
	});
	
	/* Quotes Rotator
	--------------------------------------------------*/
	
	$('ul.quotes').quote_rotator({
	    rotation_speed: 4000,
	    pause_on_hover: true,
	    randomize_first_quote: true
	});
	
	/* Sticky Navigation
	--------------------------------------------------*/
	
	if ($('body.one-page').length) {
	
	    $('.header-top').clingify({
	        breakpoint: 767, // in pixels
	        extraClass: '',
	        throttle: 100, // in milliseconds
	
	        // Callback functions:
	        detached: $.noop,
	        locked: $.noop,
	        resized: $.noop
	    });
	
	    $(function () {
	        var header = $(".header-top");
	        $(window).scroll(function () {
	            var scroll = $(window).scrollTop();
	
	            if (scroll >= 50) {
	                header.removeClass('header-top').addClass("header-top-light");
	            } else {
	                header.removeClass("header-top-light").addClass('header-top');
	            }
	        });
	    });
	
	};
	
	/* Smooth Page Scroll
	--------------------------------------------------*/

	$('#sf li a, #uber-scroll-to').click(function () {
	    var el = $(this).attr('href');
	    var elWrapped = $(el);
	    scrollToDiv(elWrapped, 100);
	    return false;
	});
	
	function scrollToDiv(element, navheight) {
	    var offset = element.offset();
	    var offsetTop = offset.top;
	    var totalScroll = offsetTop - navheight;
	
	    $('body,html').animate({
	        scrollTop: totalScroll
	    }, 500);
	}
	
	/* Select Navigation (Mobile Menu)
	--------------------------------------------------*/

	selectnav('sf', {
	    label: 'NAVIGATION',
	    autoselect: false,
	    nested: true,
	    indent: '-'
	});

	/* Superfish (Dropdown Menu)
	--------------------------------------------------*/    

	$('ul.sf-menu').superfish({
	    delay: 100, // the delay in milliseconds that the mouse can remain outside a submenu without it closing
	    animation: {
	        opacity: 'show'
	    }, // an object equivalent to first parameter of jQuery’s .animate() method. Used to animate the submenu open
	    animationOut: {
	        opacity: 'hide'
	    }, // an object equivalent to first parameter of jQuery’s .animate() method Used to animate the submenu closed
	    speed: 'fast', // speed of the opening animation. Equivalent to second parameter of jQuery’s .animate() method
	    speedOut: 'fast', // speed of the closing animation. Equivalent to second parameter of jQuery’s .animate() method
	    cssArrows: true,
	    autoArrows: false,
	    disableHI: true,
	});
	
	/* FitVids Responsive Video
	--------------------------------------------------*/
	
	$(".container").fitVids();
	
	/* Isotope (http://isotope.metafizzy.co)
	--------------------------------------------------*/
	
	if ($('body.full-image, body.alternative, .full-width').length) {
	
	    function portfolioColumn() {
	        var width = $(window).width(),
	            column;
	
	        if (width > 1400) {
	            column = 4;
	        } else if (width > 1000) {
	            column = 3;
	        } else if (width > 550) {
	            column = 2;
	        } else if (width > 0) {
	            column = 1;
	        }
	
	        return column;
	    }
	
	    function setColumn() {
	        if (!$('.portfolio-items').length) return false
	
	        var width = $(window).width(),
	            column = portfolioColumn(),
	            articleWidth = Math.floor(width / column);
	
	        $('.portfolio-items .project-item').each(function () {
	            $(this).css({
	                width: articleWidth + 'px'
	            });
	        });
	    }
	
	    setColumn();
	    $(window).bind('resize', function () {
	        setColumn();
	    });
	};
	
	$(window).load(function () {
	    var $container = $('.portfolio-items');
	    var $filter = $('.filter');
	    // Initialize isotope 
	    $container.isotope({
	        filter: '*',
	        layoutMode: 'fitRows',
	        animationOptions: {
	            duration: 750,
	            easing: 'linear'
	        }
	    });
	    // Filter items when filter link is clicked
	    $filter.find('a').click(function () {
	        var selector = $(this).attr('data-filter');
	        $filter.find('a').removeClass('current');
	        $(this).addClass('current');
	        $container.isotope({
	            filter: selector,
	            animationOptions: {
	                animationDuration: 750,
	                easing: 'linear',
	                queue: false,
	            }
	        });
	        return false;
	    });
	});
		
	/* Pie Chart (http://rendro.github.io/easy-pie-chart/)
	--------------------------------------------------*/
	
	$('.percentage').easyPieChart({
	    animate: 1000,
	    size: 200,
	    barColor: '#333333',
	    trackColor: '#ddd',
	    scaleColor: false,
	    lineCap: 'butt',
	    lineWidth: 35
	});
	
	/* Overlay Vertical Alignment
	--------------------------------------------------*/

	$.fn.extend({
	    verticalAlign: function () {
	        //Iterate over the current set of matched elements
	        return this.each(function () {
	            var obj = $(this);
	            // calculate the new padding and height
	            var childHeight = obj.height();
	            var parentHeight = obj.parent().height();
	            var diff = Math.round(((parentHeight - childHeight) / 2));
	            // apply new values
	            obj.css({
	                "display": "block",
	                "margin-top": diff
	            });
	        });
	    }
	});
	var callback = function () {
	    $(".project-item .overlay .details").verticalAlign();
	    $(".news-item .overlay .details").verticalAlign();
	    $(".team-member .overlay .details").verticalAlign();
	};
	$(document).ready(callback);
	$(window).resize(callback);
	$(window).load(callback);
	
	/* Back to top Scroll
	--------------------------------------------------*/

    $('#back-to-top a').click(function () {
        $('body,html').animate({
            scrollTop: 0
        }, 800);
        return false;
    });
		
	/* Latest Tweet/Twitter Widget
	--------------------------------------------------*/
	
	  /*
	  * ### HOW TO CREATE A VALID ID TO USE: ###
	  * Go to www.twitter.com and sign in as normal, go to your settings page.
	  * Go to "Widgets" on the left hand side.
	  * Create a new widget for what you need eg "user timeline". 
	  * Feel free to check "exclude replies" if you dont want replies in results.
	  * Now go back to settings page, and then go back to widgets page, you should
	  * see the widget you just created. Click edit.
	  * Now look at the URL in your web browser, you will see a long number like this:
	  * 345735908357048478
	  * Use this as your ID below instead!
	  */
	
	  /**
	   * How to use fetch function:
	   * @param {string} Your Twitter widget ID.
	   * @param {string} The ID of the DOM element you want to write results to. 
	   * @param {int} Optional - the maximum number of tweets you want returned. Must
	   *     be a number between 1 and 20.
	   * @param {boolean} Optional - set true if you want urls and hash
	         tags to be hyperlinked!
	   * @param {boolean} Optional - Set false if you dont want user photo /
	   *     name for tweet to show.
	   * @param {boolean} Optional - Set false if you dont want time of tweet
	   *     to show.
	   * @param {function/string} Optional - A function you can specify to format
	   *     tweet date/time however you like. This function takes a JavaScript date
	   *     as a parameter and returns a String representation of that date.
	   *     Alternatively you may specify the string 'default' to leave it with
	   *     Twitter's default renderings.
	   * @param {boolean} Optional - Show retweets or not. Set false to not show.
	   * @param {function/string} Optional - A function to call when data is ready. It
	   *     also passes the data to this function should you wish to manipulate it
	   *     yourself before outputting. If you specify this parameter you  must
	   *     output data yourself!
	   */
	
	  // ##### Simple example 1 #####
	  // A simple example to get my latest tweet and write to a HTML element with
	  // id "tweets". Also automatically hyperlinks URLS and user mentions and
	  // hashtags.
	  //twitterFetcher.fetch('352711627528880128', 'latest-tweet', 1, true, false);
	  
	if ($('body#home.default, body#home.alternative, body#home.one-page, body#home.corporate').length) {
	    twitterFetcher.fetch('352711627528880128', 'twitter-fetcher-tweet', 1, true, false);
	};
	
	if ($('.sidebar').length) {
		twitterFetcher.fetch('352711627528880128', 'twitter-feed', 4, true, false, true);
	};
	
	/* Enable zebra-striping on Homepage Blog Posts
	--------------------------------------------------*/
	
	if ($('#home.blog-style').length) {
		$('.news-item:odd').addClass('stripe');
	};
	
	if ($('#home.corporate').length) {
		$('.content:odd').addClass('stripe');
	};
	
	/* Google Map
	--------------------------------------------------*/
	
	if ($('body.one-page, body.contact').length) {
	    var map;
	    map = new GMaps({
	        div: '#map',
	        lat: 40.769459,
	        lng: -73.983227,
	        scrollwheel: false, // Remove this line if you would like to enable zooming of the map via mousewheel/touchpad.
	        draggable: false, // Remove this line if you would like to enable dragging of the map via mouse/touchpad.
	        disableDefaultUI: true,
	    });
	    map.drawOverlay({
	        lat: map.getCenter().lat(),
	        lng: map.getCenter().lng(),
	        content: '<i class="fa fa-map-marker"></i>',
	        verticalAlign: 'top',
	        horizontalAlign: 'center'
	    });
	    // The styles below present your map in Monochrome. If you would like to use a normal coloured map with your theme, then please remove the code below, from lines 107 to 225, and uncomment line 96 above.
	    var styles = [{
	        stylers: [{
	            hue: "#8A8E7D"
	        }, {
	            saturation: -60
	        }]
	    }, {
	        featureType: "road",
	        elementType: "geometry",
	        stylers: [{
	            lightness: 100
	        }, {
	            visibility: "simplified"
	        }]
	    }, {
	        featureType: "road",
	        elementType: "labels",
	        stylers: [{
	            visibility: "off"
	        }]
	    }];
	
	    map.setOptions({
	        styles: styles
	    });
	};
	
	/* Accordion Widget
	--------------------------------------------------*/
	
	//Add Inactive Class To All Accordion Headers
	$('.accordion-header').toggleClass('inactive-header');
	//Set The Accordion Content Width
	var contentwidth = $('.accordion-header').width();
	//Open The First Accordion Section When Page Loads
	$('.accordion-header').first().toggleClass('active-header').toggleClass('inactive-header');
	$('.accordion-content').first().slideDown().toggleClass('open-content');
	// The Accordion Effect
	$('.accordion-header').click(function () {
	    if ($(this).is('.inactive-header')) {
	        $('.active-header').toggleClass('active-header').toggleClass('inactive-header').next().slideToggle().toggleClass('open-content');
	        $(this).toggleClass('active-header').toggleClass('inactive-header');
	        $(this).next().slideToggle().toggleClass('open-content');
	    } else {
	        $(this).toggleClass('active-header').toggleClass('inactive-header');
	        $(this).next().slideToggle().toggleClass('open-content');
	    }
	});
			
	/* Tabbed Content
	--------------------------------------------------*/
	
	$(".tab-content").hide();
	$(".tab-content:first").show();
	$("ul.tabs li").click(function () {
	    $("ul.tabs li").removeClass("active");
	    $(this).addClass("active");
	    $(".tab-content").hide();
	    var activeTab = $(this).attr("data-id");
	    $("#" + activeTab).fadeIn();
	});
	
	/* Toggles
	--------------------------------------------------*/
	
	$(function () { // run after page loads
	    $(".toggle_container").hide();
	    //Switch the "Open" and "Close" state per click then slide up/down (depending on open/close state)
	    $("p.trigger").click(function () {
	        $(this).toggleClass("active").next().slideToggle("normal");
	        return false; //Prevent the browser jump to the link anchor
	    });
	});
	// valid XHTML method of target_blank
	$(function () { // run after page loads
	    $('a[rel*=external]').click(function () {
	        window.open(this.href);
	        return false;
	    });
	});
		
	/* Contact Form
	--------------------------------------------------*/

	// Validate the contact form
	$('.contact-form, .contact-form-standard').validate({
	    // Add requirements to each of the fields
	    rules: {
	        name: {
	            required: true,
	            minlength: 2
	        },
	        email: {
	            required: true,
	            email: true
	        },
	        message: {
	            required: true,
	            minlength: 10
	        }
	    },
	    // Specify what error messages to display
	    // when the user does something horrid
	    messages: {
	        name: {
	            required: "Please enter your name.",
	            minlength: jQuery.format("At least {0} characters required.")
	        },
	        email: {
	            required: "Please enter your email.",
	            email: "Please enter a valid email."
	        },
	        message: {
	            required: "Please enter a message.",
	            minlength: jQuery.format("At least {0} characters required.")
	        }
	    },
	    // Use Ajax to send everything to php/form.php
	    submitHandler: function (form) {
	        $("#submit").attr("value", "Sending...");
	        $(form).ajaxSubmit({
	            target: "#response",
	            success: function (responseText, statusText, xhr, $form) {
	                $(form).slideUp("fast");
	                $("#response").html(responseText).hide().slideDown("fast");
	            }
	        });
	        return false;
	    }
	});
     
	/* Form Placeholder Functionality for IE8/IE9
	--------------------------------------------------*/
	
	if (!Modernizr.input.placeholder) {
	    $(document).on('focus', '[placeholder]', function () {
	        var input = $(this);
	        if (input.val() == input.attr('placeholder')) {
	            input.val('');
	            input.removeClass('placeholder');
	        }
	    })
	    $(document).on('blur', '[placeholder]', function () {
	        var input = $(this);
	        if (input.val() == '' || input.val() == input.attr('placeholder')) {
	            input.addClass('placeholder');
	            input.val(input.attr('placeholder'));
	        }
	    })
	    $('[placeholder]').blur();
	    $(document).on('submit', 'form', function () {
	        $(this).find('[placeholder]').each(function () {
	            var input = $(this);
	            if (input.hasClass('placeholder') && input.val() == input.attr('placeholder')) {
	                input.val('');
	            }
	        })
	    });
	}
	
	/* Column clearing
	--------------------------------------------------*/
	
	$('.service-items .one-third.column').eq(3).addClass('clearcol');
	$('.team-members .one-third.column').eq(3).addClass('clearcol');

	/* End all Custom Functions */
		
});